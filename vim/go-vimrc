autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

" run :GoBuild or :GoTestCompile bsed on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

" Use only the quickfix list
let g:go_list_type = "quickfix"

" autoimport
let g:go_fmt_command = "goimports"

" lint on save
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']

" show type information
let g:go_auto_type_info = 1
autocmd FileType go nmap <Leader>e <Plug>(go-info)
set updatetime=100

" jump to definition
autocmd FileType go nmap <C-]> <Plug>(go-def)
autocmd FileType go nmap <C-t> <Plug>(go-def-pop)

" Alternate file openings
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')

" Show docs
autocmd FileType go nmap <s-k> <Plug>(go-doc)

" highlight same ids
"let g:go_auto_sameids = 1
